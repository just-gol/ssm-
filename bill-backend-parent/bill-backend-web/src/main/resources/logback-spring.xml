<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<include
		resource="org/springframework/boot/logging/logback/defaults.xml" />

	<property name="LOG_PATTERN"
		value="[%date{ISO8601}] [%-5level] - [%thread] [%X{requestId}] [%logger] [%X{akkaSource}] - %msg %rootException %n" />
	<!--打 war包 部署到tomcat的 日志存储路径 -->
	<property name="LOG_HOME"
		value="${catalina.base}/promptlyLogs" />
		
	<!--写入日志到控制台的appender,用默认的,但是要去掉charset,否则windows下tomcat下乱码 -->
	<appender name="CONSOLE"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder charset="UTF-8">
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset><!-- 此处设置字符集 -->
		</encoder>
	</appender>	
		
	<!--写入日志到文件的appender -->
	<appender name="INFO_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 
			Error 的日志 -->
		<!-- 此日志文档只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>                     <!--设置拦截的对象为INFO级别日志 -->
			<onMatch>ACCEPT</onMatch>               <!-- 当遇到了info级别时,启用改段配置. -->
			<onMismatch>DENY</onMismatch>           <!-- 没有遇到info级别日志时,屏蔽改段配置 -->
		</filter>

		<File>${LOG_HOME}/promptly_info.log</File>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_HOME}/promptly-info.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!--日志文档保留天数 -->
			<maxHistory>10</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 注意 logback 的括号需要转义 -->
		<encoder charset="UTF-8"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset><!-- 此处设置字符集 -->
		</encoder>
	</appender>


	<!--写入DEBUG日志到文件的appender -->
	<appender name="DEBUG_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 
			Error 的日志 -->
		<!-- 此日志文档只记录DEBUG级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<File>${LOG_HOME}/promptly_debug.log</File>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_HOME}/promptly-debug.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!--日志文档保留天数 -->
			<maxHistory>10</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 注意 logback 的括号需要转义 -->
		<encoder charset="UTF-8"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset><!-- 此处设置字符集 -->
		</encoder>
	</appender>


	<!--写入ERROR日志到文件的appender -->
	<appender name="ERROR_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 
			Error 的日志 -->
		<!-- 此日志文档只记录ERROR级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<File>${LOG_HOME}/promptly_error.log</File>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_HOME}/promptly-error.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!--日志文档保留天数 -->
			<maxHistory>10</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 注意 logback 的括号需要转义 -->
		<encoder charset="UTF-8"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset><!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<!--写入WARN日志到文件的appender -->
	<appender name="WARN_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 
			Error 的日志 -->
		<!-- 此日志文档只记录WARN级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<File>${LOG_HOME}/promptly_wran.log</File>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_HOME}/promptly-wran.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!--日志文档保留天数 -->
			<maxHistory>10</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 注意 logback 的括号需要转义 -->
		<encoder charset="UTF-8"
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset><!-- 此处设置字符集 -->
		</encoder>
	</appender>
	
	<!--生产环境:打印控制台和输出到文件 -->
	<springProfile name="pro">
		<root level="info">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="RollingFile" />
		</root>
	</springProfile>

	<!--开发环境:打印控制台 -->
	<springProfile name="dev">
		<root level="info">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="ERROR_FILE" />
			<appender-ref ref="WARN_FILE" />
		</root>
	</springProfile>

	<!--测试环境:打印控制台 -->
	<springProfile name="test">
		<root level="info">
			<appender-ref ref="CONSOLE" />
		</root>
	</springProfile>

</configuration>